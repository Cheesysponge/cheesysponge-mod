plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url "https://maven.shedaniel.me/"
		content {
			includeGroup "me.shedaniel"
			includeGroup "me.shedaniel.cloth"
			includeGroup "dev.architectury"
		}
	}
	maven {
		name 'modmaven'
		url "https://modmaven.dev/"
		content {
			includeGroup "mezz.jei"
		}
	}
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven {url = "https://maven.kyrptonaught.dev"}
	maven { url "https://api.modrinth.com/maven" }

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "org.yaml" // snakeyaml
		exclude group: "blue.endless" // jankson
	}
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "org.yaml" // snakeyaml
		exclude group: "blue.endless" // jankson
	}
	modImplementation("maven.modrinth:sodium:${project.sodium_version}") { exclude group: "net.fabricmc.fabric-api" }

	if (project.runtime_itemlist_mod == "jei") {
//		modLocalRuntime modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-fabric:${jei_version}") {
//			exclude group: "mezz.jei"
//		}
	} else if (project.runtime_itemlist_mod == "rei") {
//		modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-fabric:${jei_version}") {
//			exclude group: "mezz.jei"
//		}
		// Manually override architectury TODO remove once REI's dependency is fixed
		modLocalRuntime "dev.architectury:architectury-fabric:${project.architectury_version}"
		modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
			exclude group: "net.fabricmc.fabric-api"
		}
	} else {
		throw new GradleException("Invalid runtime_itemlist_mod value: " + project.runtime_itemlist_mod)
	}

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "software.bernie.geckolib:geckolib-fabric-${project.geckolib_version}"

	modImplementation "net.kyrptonaught:customportalapi:${project.portal_version}"
	include "net.kyrptonaught:customportalapi:${project.portal_version}"
	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
	processResources {
		inputs.property "version", project.version
		inputs.property "minecraft_version", project.minecraft_version
		inputs.property "loader_version", project.loader_version
		filteringCharset "UTF-8"

		filesMatching("fabric.mod.json") {
			expand "version": project.version,
					"minecraft_version": project.minecraft_version,
					"loader_version": project.loader_version
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}
def dataOutput = 'src/main/generated'

loom {
	runs {
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

			runDir "build/datagen"
		}
	}
}
sourceSets { main { resources { srcDirs += dataOutput } } }

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}